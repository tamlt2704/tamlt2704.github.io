{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","calculateWinner","lines","length","a","b","c","App","state","history","Array","fill","stepNumber","xIsNext","console","log","slice","nextPosition","setState","concat","computerThinkAndPlay","status","current","winner","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gKAAAA,EAAOC,QAAU,IAA0B,kC,iJCI3C,SAASC,EAAOC,GACZ,OACI,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACrCF,EAAMG,O,IAIbC,E,2KAEWC,GAAI,IAAD,OACZ,OACI,kBAACN,EAAD,CACII,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAM1C,OACI,6BACI,yBAAKJ,UAAU,aACVK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEvB,yBAAKP,UAAU,aACVK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEvB,yBAAKP,UAAU,aACVK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GA3BnBC,IAAMC,WA6I1B,SAASC,EAAgBJ,GAWjB,IAVA,IAAMK,EAAQ,CACN,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAENP,EAAI,EAAGA,EAAIO,EAAMC,OAAQR,IAAK,CAAC,IAAD,cACbO,EAAMP,GADO,GACxBS,EADwB,KACrBC,EADqB,KAClBC,EADkB,KAE/B,GAAIT,EAAQO,IAAMP,EAAQO,KAAOP,EAAQQ,IAAMR,EAAQO,KAAOP,EAAQS,GAC9D,OAAOT,EAAQO,GAG/B,OAAO,KAEAG,M,kDA7HX,WAAYjB,GAAQ,IAAD,8BACf,cAAMA,IACDkB,MAAQ,CACTC,QAAS,CACL,CAACZ,QAASa,MAAM,GAAGC,KAAK,QAE5BC,WAAY,EACZC,SAAS,GAPE,E,mEAWK,IAAD,OACnBC,QAAQC,IAAI,2BAMZ,IALA,IAAMN,EAAUb,KAAKY,MAAMC,QAAQO,MAAM,EAAGpB,KAAKY,MAAMI,WAAa,GAE9Df,EADUY,EAAQA,EAAQN,OAAS,GACjBN,QAAQmB,QAGvBrB,EAAI,EAAGA,EAAIE,EAAQM,OAAQR,IAChC,IAAKE,EAAQF,GAAI,CACb,IAAIsB,EAAetB,EACnBmB,QAAQC,IAAIE,GACZpB,EAAQoB,GAAgBrB,KAAKY,MAAMK,QAAU,IAAM,IAGnDjB,KAAKsB,SAAS,CACVT,QAASA,EAAQU,OAAO,CACpB,CACItB,QAASA,KAGjBe,WAAYH,EAAQN,OACpBU,SAAUjB,KAAKY,MAAMK,UACtB,WACCC,QAAQC,IAAI,EAAKP,UAGrB,S,kCAKAb,GAAI,IAAD,OACLc,EAAUb,KAAKY,MAAMC,QAAQO,MAAM,EAAGpB,KAAKY,MAAMI,WAAa,GAE9Df,EADUY,EAAQA,EAAQN,OAAS,GACjBN,QAAQmB,QAE5Bf,EAAgBJ,IAAYA,EAAQF,MAKjBC,KAAKY,MAAMK,UAG9BC,QAAQC,IAAR,2BAAgCpB,IAChCE,EAAQF,GAAKC,KAAKY,MAAMK,QAAU,IAAM,IACxCC,QAAQC,IAAIlB,GACZiB,QAAQC,IAAIN,EAAQU,OAAO,CAAC,CAACtB,QAASA,MACtCD,KAAKsB,SAAS,CACVT,QAASA,EAAQU,OAAO,CACpB,CACItB,QAASA,KAGjBe,WAAYH,EAAQN,OACpBU,SAAUjB,KAAKY,MAAMK,UACtB,WACCC,QAAQC,IAAI,aACZD,QAAQC,IAAI,EAAKP,OACjB,EAAKY,8B,+BAMP,IAGFC,EAHC,OAECC,EADU1B,KAAKY,MAAMC,QACHb,KAAKY,MAAMI,YAE/BW,EAAStB,EAAgBqB,EAAQzB,SAQrC,OAPI0B,EACAF,EAAS,WAAaE,GAEtBF,EAAS,iBAAmBzB,KAAKY,MAAMK,QAAU,IAAM,KACvDC,QAAQC,IAAIM,IAIZ,yBAAK9B,UAAU,QACX,yBAAKA,UAAU,cACX,kBAAC,EAAD,CACIM,QAASyB,EAAQzB,QACjBL,QAAS,SAAAG,GAAC,OAAI,EAAK6B,YAAY7B,OAIvC,yBAAKJ,UAAU,YACX,iCAAO8B,EAAP,W,GAnGFtB,IAAMC,WCjCJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.bef73949.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    )\n}\nclass Board extends React.Component {\n    \n    renderSquare(i) {\n        return (\n            <Square \n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <div> \n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        )\n    }\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [\n                {squares: Array(9).fill(null)}\n            ],\n            stepNumber: 0,\n            xIsNext: true\n        }\n    }\n   \n    computerThinkAndPlay() {\n        console.log('computer think and play');\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n\n        // get first empty square \n        for (let i = 0; i < squares.length; i++) {\n            if (!squares[i]) {\n                var nextPosition = i;\n                console.log(nextPosition);\n                squares[nextPosition] = this.state.xIsNext ? \"X\" : \"O\";\n\n\n                this.setState({\n                    history: history.concat([\n                        {\n                            squares: squares\n                        }\n                    ]),\n                    stepNumber: history.length,\n                    xIsNext: !this.state.xIsNext\n                }, () => { \n                    console.log(this.state);\n                }\n                );\n                break;\n            }\n        }\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        \n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n\n\n        const isComputerTurn = this.state.xIsNext ? false : true;\n        \n        if (!isComputerTurn) {\n            console.log(`game click event ${i}`);\n            squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n            console.log(squares);\n            console.log(history.concat([{squares: squares}]));\n            this.setState({\n                history: history.concat([\n                    {\n                        squares: squares\n                    }\n                ]),\n                stepNumber: history.length,\n                xIsNext: !this.state.xIsNext\n            }, () => {\n                console.log('call back');\n                console.log(this.state);\n                this.computerThinkAndPlay()\n            });\n        } \n\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        let status;\n        let winner = calculateWinner(current.squares);\n        if (winner) {\n            status = \"Winner: \" + winner;\n        } else {\n            status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n            console.log(status);\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={i => this.handleClick(i)}\n                    />\n                </div>\n\n                <div className=\"gameInfo\">\n                    <div> {status} </div> \n                </div>\n            </div>\n        )\n    }\n\n}\n\nfunction calculateWinner(squares) {\n        const lines = [\n                [0, 1, 2],\n                [3, 4, 5],\n                [6, 7, 8],\n                [0, 3, 6],\n                [1, 4, 7],\n                [2, 5, 8],\n                [0, 4, 8],\n                [2, 4, 6]\n            ];\n        for (let i = 0; i < lines.length; i++) {\n                const [a, b, c] = lines[i];\n                if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n                        return squares[a];\n                        }\n            }\n        return null;\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}